{"version":3,"sources":["Components/collection-items/collection-items.jsx","Components/with-spinner/with-spinner.styles.jsx","Components/with-spinner/with-spinner.jsx","Pages/Collection/collection.js","Pages/Collection/collection.container.jsx","redux/shop/shop.selectors.js"],"names":["connect","dispatch","addItem","item","name","price","imageUrl","className","style","backgroundImage","onClick","inverted","SpinnerOverlay","styled","div","SpinnerContainer","WithSpinner","WrappedComponent","isLoading","otherProps","state","ownProps","collection","selectCollection","match","params","collectionId","title","items","map","id","mapStateToProps","createStructuredSelector","selectIsCollectionsLoaded","CollectionPageContainer","compose","CollectionPage","selectShop","shop","selectCollections","createSelector","collections","selectCollectionsForPreview","Object","keys","key","collectionUrlParam","selectIsCollectionFetching","isFetching"],"mappings":"wGAAA,iDA6BeA,gBACb,MALyB,SAAAC,GAAQ,MAAK,CACtCC,QAAS,SAAAC,GAAI,OAAIF,EAASC,YAAQC,QAGrBH,EAvBQ,SAAC,GAAqB,IAApBG,EAAmB,EAAnBA,KAAMD,EAAa,EAAbA,QACtBE,EAAuBD,EAAvBC,KAAKC,EAAkBF,EAAlBE,MAAMC,EAAYH,EAAZG,SAClB,OACA,sBAAKC,UAAU,kBAAf,UACE,qBAAKA,UAAU,QACTC,MAAO,CACLC,gBAAgB,OAAD,OAAQH,EAAR,QAIvB,sBAAKC,UAAU,oBAAf,UACE,sBAAMA,UAAU,OAAhB,SAAwBH,IACxB,sBAAMG,UAAU,QAAhB,SAAyBF,OAE3B,cAAC,IAAD,CAAcK,QAAS,kBAAIR,EAAQC,IAAOQ,UAAQ,EAAlD,iC,qGClBSC,EAAiBC,IAAOC,IAAV,mIAQdC,EAAmBF,IAAOC,IAAV,6c,OCGdE,IAVK,SAAAC,GAAgB,OAAI,YAAiC,IAA/BC,EAA8B,EAA9BA,UAAcC,EAAgB,6BACtE,OAAOD,EACL,cAACN,EAAD,UACE,cAACG,EAAD,MAGF,cAACE,EAAD,eAAsBE,O,2ICeXnB,eAHS,SAACoB,EAAMC,GAAP,MAAqB,CAC3CC,WAAYC,YAAiBF,EAASG,MAAMC,OAAOC,aAAvCH,CAAqDH,MAEpDpB,EAhBQ,SAAC,GAAkB,IAAjBsB,EAAgB,EAAhBA,WAChBK,EAAeL,EAAfK,MAAMC,EAASN,EAATM,MACb,OACA,sBAAKrB,UAAU,kBAAf,UACE,oBAAIA,UAAU,QAAd,SAAuBoB,IACvB,qBAAKpB,UAAU,QAAf,SAEIqB,EAAMC,KAAI,SAAA1B,GAAI,OAAE,cAAC,IAAD,CAA8BA,KAAMA,GAAfA,EAAK2B,eCL5CC,EAAkBC,YAAyB,CAC/Cd,UAAW,SAACE,GAAD,OAAYa,YAA0Bb,MAG7Cc,EAA0BC,YAC9BnC,YAAQ+B,GACRf,IAF8BmB,CAG9BC,GAEaF,a,gCCnBf,oJAGMG,EAAa,SAAAjB,GAAK,OAAIA,EAAMkB,MAErBC,EAAoBC,YAC/B,CAACH,IACD,SAAAC,GAAI,OAAIA,EAAKG,eAIFC,EAA8BF,YACzC,CAACD,IACD,SAAAE,GAAW,OACXA,EAAcE,OAAOC,KAAKH,GAAaZ,KAAI,SAAAgB,GAAG,OAAGJ,EAAYI,MAAQ,MAG1DtB,EAAmB,SAAAuB,GAAkB,OAChDN,YACE,CAACD,IACD,SAAAE,GAAW,OACZA,EAAcA,EAAYK,GAAsB,SAGtCC,EAA6BP,YACxC,CAACH,IACD,SAAAC,GAAI,OAAIA,EAAKU,cAGFf,EAA4BO,YACvC,CAACH,IACD,SAAAC,GAAI,QAAMA,EAAKG","file":"static/js/5.72484801.chunk.js","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport CustomButton from '../custom-button/custom-button'\nimport {addItem} from '../../redux/cart/cart.actions'\nimport './collection-items.scss'\n\nconst CollectionItem = ({item, addItem}) => {\n  const {name,price,imageUrl} = item;\n  return (\n  <div className='collection-item'>\n    <div className='image'\n          style={{\n            backgroundImage:`url(${imageUrl})`\n          }}>\n\n    </div>\n    <div className='collection-footer'>\n      <span className='name'>{name}</span>\n      <span className='price'>{price}</span>\n    </div>\n    <CustomButton onClick={()=>addItem(item)} inverted > ADD TO CART</CustomButton>\n\n  </div>\n)};\n\nconst mapDispatchToProps = dispatch => ({\n  addItem: item => dispatch(addItem(item))\n})\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(CollectionItem)\n","import styled from 'styled-components'\n\nexport const SpinnerOverlay = styled.div`\n  height: 60vh;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const SpinnerContainer = styled.div`\n  display: inline-block;\n  width: 50px;\n  height: 50px;\n  border: 3px solid rgba(195, 195, 195, 0.6);\n  border-radius: 50%;\n  border-top-color: #636767;\n  animation: spin 1s ease-in-out infinite;\n  -webkit-animation: spin 1s ease-in-out infinite;\n  @keyframes spin {\n    to {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spin {\n    to {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n`;\n","import React from 'react'\nimport{SpinnerContainer, SpinnerOverlay} from './with-spinner.styles'\n\nconst WithSpinner = WrappedComponent => ({isLoading, ...otherProps}) => {\n  return isLoading ? (\n    <SpinnerOverlay>\n      <SpinnerContainer/>\n    </SpinnerOverlay>\n  ): (\n    <WrappedComponent {...otherProps}/>\n  )\n}\n\nexport default WithSpinner;\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport CollectionItem from '../../Components/collection-items/collection-items';\nimport './collection.styles.scss';\n\nimport {selectCollection} from '../../redux/shop/shop.selectors';\n\nconst CollectionPage = ({collection}) => {\n  const {title,items} = collection;\n  return(\n  <div className='collection-page'>\n    <h2 className='title'>{title}</h2>\n    <div className='items'>\n      {\n        items.map(item=><CollectionItem key={item.id} item={item}/>)\n      }\n    </div>\n  </div>\n)}\n\nconst mapStateToProps = (state,ownProps) => ({\n  collection: selectCollection(ownProps.match.params.collectionId)(state)\n})\nexport default connect(mapStateToProps)(CollectionPage);\n","import {connect} from 'react-redux';\nimport {compose} from 'redux'\nimport {createStructuredSelector} from 'reselect';\n\n\nimport {selectIsCollectionsLoaded} from '../../redux/shop/shop.selectors';\nimport WithSpinner from '../../Components/with-spinner/with-spinner';\n\nimport CollectionPage from './collection';\n\nconst mapStateToProps = createStructuredSelector({\n  isLoading: (state) => !selectIsCollectionsLoaded(state)\n});\n\nconst CollectionPageContainer = compose (\n  connect(mapStateToProps),\n  WithSpinner\n)(CollectionPage);\n\nexport default CollectionPageContainer;\n","import {createSelector} from 'reselect';\n\n\nconst selectShop = state => state.shop;\n\nexport const selectCollections = createSelector(\n  [selectShop],\n  shop => shop.collections\n);\n\n\nexport const selectCollectionsForPreview = createSelector(\n  [selectCollections],\n  collections =>\n  collections ? Object.keys(collections).map(key=> collections[key]) : []\n)\n\nexport const selectCollection = collectionUrlParam =>\n  createSelector(\n    [selectCollections],\n    collections =>\n  (collections ? collections[collectionUrlParam] : null)\n);\n\nexport const selectIsCollectionFetching = createSelector(\n  [selectShop],\n  shop => shop.isFetching\n);\n\nexport const selectIsCollectionsLoaded = createSelector(\n  [selectShop],\n  shop => !!shop.collections\n)\n"],"sourceRoot":""}